---ЛОКАЛЬНЫЙ ГИТ---
git config --list -> посмотреть настройки конфига гита. Там же указаны имя и эл.почта
git init -> инициализировать папку. Появится скрытая папка .git
git status -> показывается в каком состоянии репозиторий
git add . -> добавить всю текущую папку готовой к коммиту (индексация) (. -> вся текущая папка)
git add <file> -> проиндексировать конкретный файл
git commit -m <info about commit> -> коммит с описанием
git commit --amend -m <info about commit> -> изменить описание последнего коммита

git rm <file> -> удалить файл из коммита и на компьютере, и затем нужно перекоммитить
git rm --cached <file> -> удалить файл из коммита и не удалять на компьютере, он будет не проиндексирован, затем нужно перекоммитить -->
git commit --amend --no-edit

git diff -> показывает разницу в измененных файлах (q - выйти)
git diff --staged -> показывает разницу в индексированных файлах (которые после add но до commit)
git log -> история коммитов 
	(-1 показывает последний коммит, -2 два последних и тд.);
	(--oneline показать сокращенную версию в одну линию);
	(--all вся история коммитов независимо от положения HEAD);
	(--all --graph показывает наглядно ветки)
git show <hash of commit> -> показать какие изменения были в конкретном коммите (указать хэш (куча букв и цифр))

git checkout <hash> <file> -> откатить изменения в файле до последнего коммита (если указан хэш то до указанного коммита) или вернуть его если удален файл. Если указан хэш, но не указан файл, то мы перемещаемся в этот коммит, он становится HEAD.
git reset HEAD <file> -> отменить индекс конкретного файла
git checkout -b <name-of-commit> <hash> - перейти к конкретному коммиту и дать имя ветке. Последний коммит называется master, это мастер ветка

git cat-file -p <hash> -> показать содержимое коммита по его хэш

git branch -> команда может создавать, удалять и переименовывать ветки
git branch -m <new name local branch> -> находясь в какой-то ветке переименует ее.

---SSH КЛЮЧ---
ssh-keygen -t rsa -b 4096 -C "your_mail@example.com" -> генерирует SSH ключ. Делается только один раз, указывается мыло при регистрации. Ключ нужен для авторизации с сервером гит.
cd ~/.ssh -> ls -> проверить наличие ключа на компьютере
Залить ключ на гитхаб
ssh -T -i ~/.ssh/idname git@github.com -> проверить связи с гитхабом ключ парой
Можно создать конфиг в котором указать ключ для работы с хостом github.com

---РАБОТА С ГИТХАБ--- метки=ветки
git clone <SHH or HTTPS> -> склонировать удаленный репозиторий на компьютер
git remote add origin <link by github> -> привязать репозиторий на гитхаб (origin это принятое имя remote репозитория, его можно задать другим, просто так принято)
git remote -v -> проверить добавлен ли репозиторий

git push origin master - пуш в мастер ветку origin репозитория
git push origin <local branch>:<remote branch> -> пуш локальной ветки в удаленную ветку origin репозитория. Имена могут быть разными
git push origin :<remote branch> -> удаляет удаленную ветку. (как бы пуш ничего в удаленную ветку)

git pull origin master - находясь в master ветке, пулл ветки master origin репозитория. Помечены как origin/master - удаленная метка. Будут две метки: master и origin/master. Другие ветки он не вытянет, поэтому переключиться на них пока не получится.
git fetch origin -> забирает другие ветки origin репозитория. Помечены как origin/<branch> - удаленная метка, локальной метки нет
git checkout -b <local branch> <origin/remote branch> -> создать и назвать ветку в месте где удаленная ветка. 
	Например: git checkout -b addcontent origin/addcontent -> создаст локальную ветку addcontent в месте где  удаленная ветка origin/addcontent

---СВЯЗЬ ЛОКАЛЬНОЙ И УДАЛЕННОЙ ВЕТКИ---
git branch --set-upstream-to=<origin/remote branch> -> связывает локальную и удаленную метки. Теперь можно просто писать git push и git pull не указывая ветки.
git push -u origin <remote branch> -> пушит в указанную ветку, например мастер, и сразу связывает локальную ветку с удаленной.
git branch -vv -> посмотреть очень подробно (-vv) какие локальные метки связанны с удаленными.

---РАБОТА С РЕДАКТОРОМ vim---
vim <file> -> открыть в редакторе
нажать ESC после редактирования
:w - сохранить, :wq - сохранить и выйти, :q! - выйти без сохранения
нажать Enter

--------РАБОТА С ПЕРЕХОДАМИ----------
echo $SHELL -> проверяет текущий шелл
pwd -> показать полный путь текущей папки
cd -> переход по папкам
ls -1 -> список содержимого в папке в столбик. -а -> показать в том числе скрытые
start . -> открыть папку в проводнике (точка одначает текущую)
cat <file> -> показать содержимое файла
